# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="N7`o^vr4ygopSn=1hmQDSSBH65bMOd;rg_TURS055[BoBJ8xm7pp?YSbxph6EL=N"

# The application languages
# ~~~~~
application.langs="en,fr,de,pl"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router 
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point. 
# Furthermore, it's assumed your route file is named properly. 
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~ 
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
#db.default.driver = org.postgresql.Driver
#db.default.url = "jdbc:postgresql://localhost/docview"
#db.default.user=docview
#db.default.password=changeme

db.default.driver = com.mysql.jdbc.Driver
db.default.url = "jdbc:mysql://localhost:3306/docview?useUnicode=true&characterEncoding=UTF-8"
db.default.user = docview
db.default.password = changeme

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

neo4j.server.host = "localhost"
neo4j.server.port = 7474
neo4j.server.endpoint = "ehri"

# Solr Configuration
solr.path = "http://localhost:8983/solr/portal"

# Yuck - specify where the indexer binary is location...
# Overridden by the prod config
solr.indexer.jar = ${?HOME}/dev/play/docview/bin/indexer.jar

# Contexts for Play's thread pools. Mostly the default context
# is used. See: https://www.playframework.com/documentation/2.3.0/ThreadPools
contexts {
    ead-export {
        fork-join-executor {
            parallelism-factor = 1
            parallelism-max = 2
        }
    }

    simple-db-looksups {
        fork-join-executor {
            parallelism-factor = 10.0
        }
    }
}


# Email settings - override in prod
smtp.host = localhost

# Capcha key - override in prod
recaptcha.key.public = 6LcEhOcSAAAAAPBP07JcXJJJL7nQbsDVQSaiHIHt
recaptcha.key.private = 6LcEhOcSAAAAAOTZqZYDeLdXv0911i-yUuMKEPrr

# Signing CSRF tokens seems to cause problems
csrf.sign.tokens = false


# Analytics - should be overridden by prod conf
analytics.enabled = true
analytics.trackingId = "DUMMY"

# Don't show recaptcha
recaptcha.skip = true

# EHRI specific config
ehri {
    backend {
        # Controls certain properties that are always requested from the
        # backend in serialization.
        # For the moment we always want the user's image url
        includedProperties = ["imageUrl"]
    }

    # THIS ENSURES SECURED ROUTES ARE SECURED. MAKE SURE IT'S EITHER
    # UNDEFINED OR TRUE IN A PRODUCTION ENVIRONMENT (defaults to true)
    secured = true

    # Whether this instance has https enabled. Production instances
    # should enable this where applicable
    https = false

    # Is this a staging instance?
    staging = false

    # Minimum delay between rendering signup form
    # and allowing submission. If this setting is not
    # defined then no timeout check will take place.
    signup.timeCheckSeconds = 5

    # Minumum password length in chars
    passwords.minLength = 6

    # Readonly check file - a path to a file on the server's
    # local system. If this file exists than the portal will
    # run in readonly mode, which prevents users from logging
    # (and by extension, changing things.)
    readonly.file = "READONLY"

    # Maintenance check file - a path to a file on the server's
    # local system. If this file exists than the portal will
    # run in maintenance mode, which return 503 service
    # unavailable for all requests.
    maintenance.file = "MAINTENANCE"

    # Rate limiting - this applies to certain actions and prevents
    # a single IP from POSTing some forms (e.g. login form) more than
    # a certain number of times in a given period
    ratelimit {
        limit: 20     # number of requests
        timeout: 3600 # seconds
    }

    # the helpdesk service URL
    helpdesk.url = "http://helpdesk.aehri.dans.knaw.nl/responseJSON"

    # Portal specific config
    portal {
        # Should users be logged in to view the portal?
        secured = false

        # Default user groups for portal signups
        defaultUserGroups = ["portal"]

        # Moderator groups, used for annotation visibility
        # "all" is for all types of data. Specific entity
        # types can override this
        # "moderators" is just the name of the moderators
        # group in the fixtures
        moderators {
            all: ["moderators"]
        }

        # Copy feedback mails to this address
        feedback.copyTo = "test@example.com"
        feedback.site.copyTo = "site@example.com"
        feedback.data.copyTo = "site@example.com"
    }
}

# system-specific overrides and extensions
include "search.conf"
include "form-defaults.conf"
include "oauth2.conf"
include "parse.conf"
include "aws.conf"
