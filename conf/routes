# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

#GET     /login           controllers.Application.login
#POST     /login           controllers.Application.loginPost

# OpenID
GET     /login                          controllers.Application.login
POST	/login							controllers.Application.loginPost
GET     /logout                         controllers.Application.logout

# Plugin-handled login
# OpenID
GET     /openid                         controllers.OpenIDLoginHandler.openIDCallback
POST	/openid							controllers.OpenIDLoginHandler.loginPost

# Mozilla Persona
POST	/persona						controllers.PersonaLoginHandler.loginPost

# Admin routes
GET     /admin                          controllers.Admin.adminActions
GET     /admin/createUser               controllers.Admin.createUser
POST     /admin/createUser               controllers.Admin.createUserPost
GET     /admin/login                    controllers.Admin.passwordLogin
POST    /admin/login                    controllers.Admin.passwordLoginPost
GET     /admin/changePassword           controllers.Admin.changePassword
POST    /admin/changePassword           controllers.Admin.changePasswordPost

GET     /admin/updateIndex              controllers.SearchAdmin.updateIndex
POST    /admin/updateIndex              controllers.SearchAdmin.updateIndexPost


# Search testing
GET /search                             controllers.Application.search

# Change locale
GET     /locale                         controllers.Application.changeLocale

# Home page
GET     /                           controllers.Application.index
GET     /docs                controllers.DocumentaryUnits.list
GET     /docs/search         controllers.DocumentaryUnits.search
GET     /docs/show/:id       controllers.DocumentaryUnits.get(id: String)
GET     /docs/history/:id    controllers.DocumentaryUnits.history(id: String)
GET     /docs/json/:id       controllers.DocumentaryUnits.getJson(id: String)
GET     /docs/delete/:id     controllers.DocumentaryUnits.delete(id: String)
POST    /docs/delete/:id     controllers.DocumentaryUnits.deletePost(id: String)
GET     /docs/update/:id     controllers.DocumentaryUnits.update(id: String)
POST    /docs/update/:id     controllers.DocumentaryUnits.updatePost(id: String)
GET     /docs/create/:id     controllers.DocumentaryUnits.createDoc(id: String)
POST    /docs/create/:id     controllers.DocumentaryUnits.createDocPost(id: String)
GET     /docs/createDescription/:id     controllers.DocumentaryUnits.createDescription(id: String)
POST    /docs/createDescription/:id     controllers.DocumentaryUnits.createDescriptionPost(id: String)
GET     /docs/updateDescription/:id/:did     controllers.DocumentaryUnits.updateDescription(id: String, did: String)
POST    /docs/updateDescription/:id/:did     controllers.DocumentaryUnits.updateDescriptionPost(id: String, did: String)
GET     /docs/deleteDescription/:id/:did     controllers.DocumentaryUnits.deleteDescription(id: String, did: String)
POST    /docs/deleteDescription/:id/:did     controllers.DocumentaryUnits.deleteDescriptionPost(id: String, did: String)
GET     /docs/visibility/:id     controllers.DocumentaryUnits.visibility(id: String)
POST    /docs/visibility/:id     controllers.DocumentaryUnits.visibilityPost(id: String)
GET     /docs/permissions/:id/manage    controllers.DocumentaryUnits.managePermissions(id: String, page: Int ?= 1, spage: Int ?= 1, limit: Int ?=20)
GET     /docs/permissions/:id/add    controllers.DocumentaryUnits.addItemPermissions(id: String)
GET     /docs/permissions/:id/:userType/:userId    controllers.DocumentaryUnits.setItemPermissions(id: String, userType: String, userId: String)
POST    /docs/permissions/:id/:userType/:userId    controllers.DocumentaryUnits.setItemPermissionsPost(id: String, userType: String, userId: String)
GET     /docs/scope/:id/add    controllers.DocumentaryUnits.addScopedPermissions(id: String)
GET     /docs/scope/:id/:userType/:userId    controllers.DocumentaryUnits.setScopedPermissions(id: String, userType: String, userId: String)
POST    /docs/scope/:id/:userType/:userId    controllers.DocumentaryUnits.setScopedPermissionsPost(id: String, userType: String, userId: String)
GET     /docs/annotate/:id     controllers.DocumentaryUnits.annotate(id: String)
POST    /docs/annotate/:id     controllers.DocumentaryUnits.annotatePost(id: String)
GET     /docs/link/:id          controllers.DocumentaryUnits.linkTo(id: String)
GET     /docs/link/:id/:toType     controllers.DocumentaryUnits.linkAnnotateSelect(id: String, toType: String)
GET     /docs/link/:id/:toType/:to     controllers.DocumentaryUnits.linkAnnotate(id: String, toType: String, to: String)
POST    /docs/link/:id/:toType/:to     controllers.DocumentaryUnits.linkAnnotatePost(id: String, toType: String, to: String)

GET     /users                controllers.UserProfiles.list
GET     /users/show/:id       controllers.UserProfiles.get(id: String)
GET     /users/history/:id    controllers.UserProfiles.history(id: String)
GET     /users/json/:id       controllers.UserProfiles.getJson(id: String)
GET     /users/delete/:id     controllers.UserProfiles.delete(id: String)
POST    /users/delete/:id     controllers.UserProfiles.deletePost(id: String)
GET     /users/update/:id     controllers.UserProfiles.update(id: String)
POST    /users/update/:id     controllers.UserProfiles.updatePost(id: String)
GET     /users/permissions/:id     controllers.UserProfiles.permissions(id: String)
POST    /users/permissions/:id     controllers.UserProfiles.permissionsPost(id: String)
GET     /users/permissions/:id/list     controllers.UserProfiles.grantList(id: String)

GET     /group                controllers.Groups.list
GET     /group/show/:id       controllers.Groups.get(id: String)
GET     /group/history/:id    controllers.Groups.history(id: String)
GET     /group/json/:id       controllers.Groups.getJson(id: String)
GET     /group/create         controllers.Groups.create
POST    /group/create         controllers.Groups.createPost
GET     /group/delete/:id     controllers.Groups.delete(id: String)
POST    /group/delete/:id     controllers.Groups.deletePost(id: String)
GET     /group/update/:id     controllers.Groups.update(id: String)
POST    /group/update/:id     controllers.Groups.updatePost(id: String)
GET     /group/permissions/:id     controllers.Groups.permissions(id: String)
POST    /group/permissions/:id     controllers.Groups.permissionsPost(id: String)
GET     /group/permissions/:id/list     controllers.Groups.grantList(id: String)
GET		/group/members/:userType/:userId	controllers.Groups.membership(userType: String, userId: String)
GET		/group/add/:id/:userType/:userId	controllers.Groups.addMember(id: String, userType: String, userId: String)
POST	/group/add/:id/:userType/:userId	controllers.Groups.addMemberPost(id: String, userType: String, userId: String)
GET		/group/remove/:id/:userType/:userId	controllers.Groups.removeMember(id: String, userType: String, userId: String)
POST	/group/remove/:id/:userType/:userId	controllers.Groups.removeMemberPost(id: String, userType: String, userId: String)


GET     /agent                controllers.Repositories.list
GET     /agent/search         controllers.Repositories.search
GET     /agent/show/:id       controllers.Repositories.get(id: String)
GET     /agent/history/:id    controllers.Repositories.history(id: String)
GET     /agent/json/:id       controllers.Repositories.getJson(id: String)
GET     /agent/create         controllers.Repositories.create
POST    /agent/create         controllers.Repositories.createPost
GET     /agent/delete/:id     controllers.Repositories.delete(id: String)
POST    /agent/delete/:id     controllers.Repositories.deletePost(id: String)
GET     /agent/update/:id     controllers.Repositories.update(id: String)
POST    /agent/update/:id     controllers.Repositories.updatePost(id: String)
GET     /agent/create/:id     controllers.Repositories.createDoc(id: String)
POST    /agent/create/:id     controllers.Repositories.createDocPost(id: String)
GET     /agent/visibility/:id     controllers.Repositories.visibility(id: String)
POST    /agent/visibility/:id     controllers.Repositories.visibilityPost(id: String)
GET     /agent/permissions/:id/manage    controllers.Repositories.managePermissions(id: String, page: Int ?= 1, spage: Int ?= 1, limit: Int ?=20)
GET     /agent/permissions/:id/add    controllers.Repositories.addItemPermissions(id: String)
GET     /agent/permissions/:id/:userType/:userId    controllers.Repositories.setItemPermissions(id: String, userType: String, userId: String)
POST    /agent/permissions/:id/:userType/:userId    controllers.Repositories.setItemPermissionsPost(id: String, userType: String, userId: String)
GET     /agent/scope/:id/add    controllers.Repositories.addScopedPermissions(id: String)
GET     /agent/scope/:id/:userType/:userId    controllers.Repositories.setScopedPermissions(id: String, userType: String, userId: String)
POST    /agent/scope/:id/:userType/:userId    controllers.Repositories.setScopedPermissionsPost(id: String, userType: String, userId: String)
GET     /agent/annotate/:id     controllers.Repositories.annotate(id: String)
POST    /agent/annotate/:id     controllers.Repositories.annotatePost(id: String)

GET     /cpf                controllers.Actors.list
GET     /cpf/search         controllers.Actors.search
GET     /cpf/show/:id       controllers.Actors.get(id: String)
GET     /cpf/history/:id    controllers.Actors.history(id: String)
GET     /cpf/json/:id       controllers.Actors.getJson(id: String)
GET     /cpf/create         controllers.Actors.create
POST    /cpf/create         controllers.Actors.createPost
GET     /cpf/delete/:id     controllers.Actors.delete(id: String)
POST    /cpf/delete/:id     controllers.Actors.deletePost(id: String)
GET     /cpf/update/:id     controllers.Actors.update(id: String)
POST    /cpf/update/:id     controllers.Actors.updatePost(id: String)
GET     /cpf/visibility/:id     controllers.Actors.visibility(id: String)
POST    /cpf/visibility/:id     controllers.Actors.visibilityPost(id: String)
GET     /cpf/permissions/:id/manage    controllers.Actors.managePermissions(id: String, page: Int ?= 1, limit: Int ?=20)
GET     /cpf/permissions/:id/add    controllers.Actors.addItemPermissions(id: String)
GET     /cpf/permissions/:id/:userType/:userId    controllers.Actors.setItemPermissions(id: String, userType: String, userId: String)
POST    /cpf/permissions/:id/:userType/:userId    controllers.Actors.setItemPermissionsPost(id: String, userType: String, userId: String)
GET     /cpf/annotate/:id     controllers.Actors.annotate(id: String)
POST    /cpf/annotate/:id     controllers.Actors.annotatePost(id: String)
GET     /cpf/link/:id          controllers.Actors.linkTo(id: String)
GET     /cpf/link/:id/:toType     controllers.Actors.linkAnnotateSelect(id: String, toType: String)
GET     /cpf/link/:id/:toType/:to     controllers.Actors.linkAnnotate(id: String, toType: String, to: String)
POST    /cpf/link/:id/:toType/:to     controllers.Actors.linkAnnotatePost(id: String, toType: String, to: String)

GET     /vocabs                controllers.Vocabularies.list
GET     /vocabs/show/:id       controllers.Vocabularies.get(id: String)
GET     /vocabs/history/:id    controllers.Vocabularies.history(id: String)
GET     /vocabs/json/:id       controllers.Vocabularies.getJson(id: String)
GET     /vocabs/create          controllers.Vocabularies.create
POST    /vocabs/create          controllers.Vocabularies.createPost
GET     /vocabs/delete/:id     controllers.Vocabularies.delete(id: String)
POST    /vocabs/delete/:id     controllers.Vocabularies.deletePost(id: String)
GET     /vocabs/update/:id     controllers.Vocabularies.update(id: String)
POST    /vocabs/update/:id     controllers.Vocabularies.updatePost(id: String)
GET     /vocabs/create/:id     controllers.Vocabularies.createConcept(id: String)
POST    /vocabs/create/:id     controllers.Vocabularies.createConceptPost(id: String)
GET     /vocabs/visibility/:id     controllers.Vocabularies.visibility(id: String)
POST    /vocabs/visibility/:id     controllers.Vocabularies.visibilityPost(id: String)
GET     /vocabs/permissions/:id/manage    controllers.Vocabularies.managePermissions(id: String, page: Int ?= 1, spage: Int ?= 1, limit: Int ?=20)
GET     /vocabs/permissions/:id/add    controllers.Vocabularies.addItemPermissions(id: String)
GET     /vocabs/permissions/:id/:userType/:userId    controllers.Vocabularies.setItemPermissions(id: String, userType: String, userId: String)
POST    /vocabs/permissions/:id/:userType/:userId    controllers.Vocabularies.setItemPermissionsPost(id: String, userType: String, userId: String)
GET     /vocabs/scope/:id/add    controllers.Vocabularies.addScopedPermissions(id: String)
GET     /vocabs/scope/:id/:userType/:userId    controllers.Vocabularies.setScopedPermissions(id: String, userType: String, userId: String)
POST    /vocabs/scope/:id/:userType/:userId    controllers.Vocabularies.setScopedPermissionsPost(id: String, userType: String, userId: String)
GET     /vocabs/annotate/:id     controllers.Vocabularies.annotate(id: String)
POST    /vocabs/annotate/:id     controllers.Vocabularies.annotatePost(id: String)

GET     /concepts                controllers.Concepts.list
GET     /concepts/show/:id       controllers.Concepts.get(id: String)
GET     /concepts/history/:id    controllers.Concepts.history(id: String)
GET     /concepts/json/:id       controllers.Concepts.getJson(id: String)
GET     /concepts/delete/:id     controllers.Concepts.delete(id: String)
POST    /concepts/delete/:id     controllers.Concepts.deletePost(id: String)
GET     /concepts/update/:id     controllers.Concepts.update(id: String)
POST    /concepts/update/:id     controllers.Concepts.updatePost(id: String)
GET     /concepts/create/:id     controllers.Concepts.createConcept(id: String)
POST    /concepts/create/:id     controllers.Concepts.createConceptPost(id: String)
GET     /concepts/visibility/:id     controllers.Concepts.visibility(id: String)
POST    /concepts/visibility/:id     controllers.Concepts.visibilityPost(id: String)
GET     /concepts/permissions/:id/manage    controllers.Concepts.managePermissions(id: String, page: Int ?= 1, spage: Int ?= 1, limit: Int ?=20)
GET     /concepts/permissions/:id/add    controllers.Concepts.addItemPermissions(id: String)
GET     /concepts/permissions/:id/:userType/:userId    controllers.Concepts.setItemPermissions(id: String, userType: String, userId: String)
POST    /concepts/permissions/:id/:userType/:userId    controllers.Concepts.setItemPermissionsPost(id: String, userType: String, userId: String)
GET     /concepts/scope/:id/add    controllers.Concepts.addScopedPermissions(id: String)
GET     /concepts/scope/:id/:userType/:userId    controllers.Concepts.setScopedPermissions(id: String, userType: String, userId: String)
POST    /concepts/scope/:id/:userType/:userId    controllers.Concepts.setScopedPermissionsPost(id: String, userType: String, userId: String)
GET     /concepts/annotate/:id     controllers.Concepts.annotate(id: String)
POST    /concepts/annotate/:id     controllers.Concepts.annotatePost(id: String)
GET     /concepts/link/:id/:toType/:to     controllers.Concepts.linkAnnotate(id: String, toType: String, to: String)
POST    /concepts/link/:id/:toType/:to     controllers.Concepts.linkAnnotatePost(id: String, toType: String, to: String)


GET     /action                controllers.SystemEvents.list
GET     /action/show/:id       controllers.SystemEvents.get(id: String)

GET     /annotation/show/:id       controllers.Annotations.get(id: String)
GET     /annotation/history/:id       controllers.Annotations.history(id: String)
GET     /annotation/visibility/:id     controllers.Annotations.visibility(id: String)
POST    /annotation/visibility/:id     controllers.Annotations.visibilityPost(id: String)
GET     /annotation/annotate/:id     controllers.Annotations.annotate(id: String)
POST    /annotation/annotate/:id     controllers.Annotations.annotatePost(id: String)
GET     /annotation/delete/:id     controllers.Annotations.delete(id: String)
POST    /annotation/delete/:id     controllers.Annotations.deletePost(id: String)

# API
GET     /api/:contentType/list          controllers.ApiController.listItems(contentType: String)
GET     /api/:contentType/:id           controllers.ApiController.getItem(contentType: String, id: String)
GET     /api/*path               controllers.ApiController.get(path: String)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)


