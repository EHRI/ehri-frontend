# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~


# Multimodule test
-> /        core.Routes
-> /user    users.Routes
-> /sets    authorities.Routes
-> /arch    archdesc.Routes
-> /voc     vocabs.Routes

GET     /admin/updateIndex              controllers.Search.updateIndex
POST    /admin/updateIndex              controllers.Search.updateIndexPost

# Search testing
GET /search                             controllers.Search.search

# Generic item redirection
GET /item/:id                           controllers.Application.get(id: String)
GET /item/:type/:id                           controllers.Application.getType(type: String, id: String)

# Get JSON (id,name) pair for a given type
GET /filter                       controllers.Search.filter

# Change locale
GET     /locale                         controllers.Application.changeLocale

# Home page
GET     /docs                controllers.DocumentaryUnits.search
GET     /docs/list           controllers.DocumentaryUnits.list
# Testing
GET     /docs/meta/:id       controllers.DocumentaryUnits.getClientJson(id)

GET     /docs/show/:id       controllers.DocumentaryUnits.get(id: String)
GET     /docs/history/:id    controllers.DocumentaryUnits.history(id: String)
GET     /docs/delete/:id     controllers.DocumentaryUnits.delete(id: String)
POST    /docs/delete/:id     controllers.DocumentaryUnits.deletePost(id: String)
GET     /docs/update/:id     controllers.DocumentaryUnits.update(id: String)
POST    /docs/update/:id     controllers.DocumentaryUnits.updatePost(id: String)
GET     /docs/create/:id     controllers.DocumentaryUnits.createDoc(id: String)
POST    /docs/create/:id     controllers.DocumentaryUnits.createDocPost(id: String)
GET     /docs/createDescription/:id     controllers.DocumentaryUnits.createDescription(id: String)
POST    /docs/createDescription/:id     controllers.DocumentaryUnits.createDescriptionPost(id: String)
GET     /docs/updateDescription/:id/:did     controllers.DocumentaryUnits.updateDescription(id: String, did: String)
POST    /docs/updateDescription/:id/:did     controllers.DocumentaryUnits.updateDescriptionPost(id: String, did: String)
GET     /docs/deleteDescription/:id/:did     controllers.DocumentaryUnits.deleteDescription(id: String, did: String)
POST    /docs/deleteDescription/:id/:did     controllers.DocumentaryUnits.deleteDescriptionPost(id: String, did: String)
GET     /docs/visibility/:id     controllers.DocumentaryUnits.visibility(id: String)
POST    /docs/visibility/:id     controllers.DocumentaryUnits.visibilityPost(id: String)
GET     /docs/permissions/:id/manage    controllers.DocumentaryUnits.managePermissions(id: String, page: Int ?= 1, spage: Int ?= 1, limit: Int ?=20)
GET     /docs/permissions/:id/add    controllers.DocumentaryUnits.addItemPermissions(id: String)
GET     /docs/permissions/:id/:userType/:userId    controllers.DocumentaryUnits.setItemPermissions(id: String, userType: String, userId: String)
POST    /docs/permissions/:id/:userType/:userId    controllers.DocumentaryUnits.setItemPermissionsPost(id: String, userType: String, userId: String)
GET     /docs/scope/:id/add    controllers.DocumentaryUnits.addScopedPermissions(id: String)
GET     /docs/scope/:id/:userType/:userId    controllers.DocumentaryUnits.setScopedPermissions(id: String, userType: String, userId: String)
POST    /docs/scope/:id/:userType/:userId    controllers.DocumentaryUnits.setScopedPermissionsPost(id: String, userType: String, userId: String)

GET     /docs/link/:id          controllers.DocumentaryUnits.linkTo(id: String)
GET     /docs/link/:id/:toType     controllers.DocumentaryUnits.linkAnnotateSelect(id: String, toType: String)
GET     /docs/link/:id/:toType/:to     controllers.DocumentaryUnits.linkAnnotate(id: String, toType: String, to: String)
POST    /docs/link/:id/:toType/:to     controllers.DocumentaryUnits.linkAnnotatePost(id: String, toType: String, to: String)
GET     /docs/linkm/:id          controllers.DocumentaryUnits.linkMultiAnnotate(id: String)
POST    /docs/linkm/:id     controllers.DocumentaryUnits.linkMultiAnnotatePost(id)
POST    /docs/linkjs/:id/:accessPoint   controllers.DocumentaryUnits.createLink(id: String, accessPoint: String)
GET     /docs/linkjs/:id/:accessPoint   controllers.DocumentaryUnits.getLink(id: String, accessPoint: String)
POST    /docs/linkjs/:id                controllers.DocumentaryUnits.createMultipleLinks(id: String)
# Refetch access point HTML
GET     /docs/accessPoints/:id/:desc   controllers.DocumentaryUnits.manageAccessPoints(id: String, desc: String)
POST    /docs/accessPoints/create/:id/:desc   controllers.DocumentaryUnits.createAccessPoint(id: String, desc: String)
GET     /docs/accessPointsJs/:id   controllers.DocumentaryUnits.getAccessPointsJson(id: String)
POST    /docs/deleteAccessPoint/:id/:accessPoint  controllers.DocumentaryUnits.deleteAccessPoint(id: String, accessPoint: String)
POST    /docs/deleteLink/:id/:link  controllers.DocumentaryUnits.deleteLink(id: String, link: String)


# Testing
GET     /repository/meta/:id       controllers.Repositories.getClientJson(id)

GET     /repository                controllers.Repositories.search
GET     /repository/list           controllers.Repositories.list
GET     /repository/show/:id       controllers.Repositories.get(id: String)
GET     /repository/history/:id    controllers.Repositories.history(id: String)
GET     /repository/delete/:id     controllers.Repositories.delete(id: String)
POST    /repository/delete/:id     controllers.Repositories.deletePost(id: String)
GET     /repository/update/:id     controllers.Repositories.update(id: String)
POST    /repository/update/:id     controllers.Repositories.updatePost(id: String)
GET     /repository/create/:id     controllers.Repositories.createDoc(id: String)
POST    /repository/create/:id     controllers.Repositories.createDocPost(id: String)
GET     /repository/visibility/:id     controllers.Repositories.visibility(id: String)
POST    /repository/visibility/:id     controllers.Repositories.visibilityPost(id: String)
GET     /repository/permissions/:id/manage    controllers.Repositories.managePermissions(id: String, page: Int ?= 1, spage: Int ?= 1, limit: Int ?=20)
GET     /repository/permissions/:id/add    controllers.Repositories.addItemPermissions(id: String)
GET     /repository/permissions/:id/:userType/:userId    controllers.Repositories.setItemPermissions(id: String, userType: String, userId: String)
POST    /repository/permissions/:id/:userType/:userId    controllers.Repositories.setItemPermissionsPost(id: String, userType: String, userId: String)
GET     /repository/scope/:id/add    controllers.Repositories.addScopedPermissions(id: String)
GET     /repository/scope/:id/:userType/:userId    controllers.Repositories.setScopedPermissions(id: String, userType: String, userId: String)
POST    /repository/scope/:id/:userType/:userId    controllers.Repositories.setScopedPermissionsPost(id: String, userType: String, userId: String)

GET     /country                controllers.Countries.search
GET     /country/show/:id       controllers.Countries.get(id: String)
GET     /country/history/:id    controllers.Countries.history(id: String)
GET     /country/create          controllers.Countries.create
POST    /country/create          controllers.Countries.createPost
GET     /country/delete/:id     controllers.Countries.delete(id: String)
POST    /country/delete/:id     controllers.Countries.deletePost(id: String)
GET     /country/update/:id     controllers.Countries.update(id: String)
POST    /country/update/:id     controllers.Countries.updatePost(id: String)
GET     /country/create/:id     controllers.Countries.createRepository(id: String)
POST    /country/create/:id     controllers.Countries.createRepositoryPost(id: String)
GET     /country/visibility/:id     controllers.Countries.visibility(id: String)
POST    /country/visibility/:id     controllers.Countries.visibilityPost(id: String)
GET     /country/permissions/:id/manage    controllers.Countries.managePermissions(id: String, page: Int ?= 1, spage: Int ?= 1, limit: Int ?=20)
GET     /country/permissions/:id/add    controllers.Countries.addItemPermissions(id: String)
GET     /country/permissions/:id/:userType/:userId    controllers.Countries.setItemPermissions(id: String, userType: String, userId: String)
POST    /country/permissions/:id/:userType/:userId    controllers.Countries.setItemPermissionsPost(id: String, userType: String, userId: String)
GET     /country/scope/:id/add    controllers.Countries.addScopedPermissions(id: String)
GET     /country/scope/:id/:userType/:userId    controllers.Countries.setScopedPermissions(id: String, userType: String, userId: String)
POST    /country/scope/:id/:userType/:userId    controllers.Countries.setScopedPermissionsPost(id: String, userType: String, userId: String)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)


