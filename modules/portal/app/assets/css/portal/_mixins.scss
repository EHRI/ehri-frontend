// Mixin for applying heading-like text to
// certain items
%heading-text {
  font-size: $h4-font-size;
  font-family: $headings-font-family;
  font-weight: 400;
  text-transform: uppercase;
  font-stretch: semi-condensed;
}

// Labels for fields and e.g. definition list terms (dt)
%field-label {
  font-size: $font-size-sm;
  font-family: $headings-font-family;
  text-transform: uppercase;
  color: var(--secondary);
  font-weight: 500;
}

%small-muted {
  font-size: $font-size-xs;
  color: $text-muted;
}

%nav-link {
  display: block;
  padding: 1rem 0;

  @include media-breakpoint-up(lg) {
    padding: .5rem 1rem;
  }
}

@mixin list-inline($sep: '\00a0') {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  @if($sep != '') {
    > li:after {
      content: $sep;
    }
    > li:last-child:after {
      content: '';
    }
  }
}

/**
 * Outputs both a standard color derived
 * from one of the color map variables
 * and a CSS variable of the same name.
 * This provides compatibility with browsers
 * that don't support CSS variables.
 *
 * Note: the 'varName' arg should always be a
 * quoted string to avoid collision with built-in
 * HTML/CSS color names.
 */
@mixin color-var($property, $varName) {
  $all-colors: map-merge($colors, $theme-colors);
  #{$property}: #{map-get($all-colors, #{$varName})};
  #{$property}: var(--#{$varName});
}

// A search box with an embedded search
// icon. The input should have the `form-control`
// class and the icon `form-control-feedback`
@mixin search-box($color: $gray-100, $opacity: 0.1, $border-opacity: 0.3) {

  @include media-breakpoint-up(lg) {
    // FIXME:
    // Would like to remove this explicit sizing but without
    // it the menu does an ugly reflow.
    max-width: 16rem;
  }

  @include clearfix();
  position: relative;
  display: flex;

  background-color: rgba(255,255,255, $opacity);
  border: $border-width solid rgba($color, $border-opacity);

  input[type=search] {
    font-size: $font-size-sm;
    width: 100%;
    left: 0;

    float: left;
    box-shadow: none;
    background-color: transparent;
    border-radius: 0;
    border-color: transparent;
    color: $color;
    padding-right: 3rem;

    &::placeholder {
      font-size: $font-size-sm;
      color: $color;
    }
  }

  .input-group-append {
    float: right;
  }

  .submit-search {
    height: 100%;
    border-color: transparent;
    position: absolute;
    right: 0;
  }

  .form-control-feedback {
    font-size: $font-size-lg;
    display: block;
    float: left;
    z-index: 20;
    text-align: center;
    color: $color;
  }
}

@mixin flash-bg($from, $to) {
  -webkit-animation: flash-bg 1s linear;
  -o-animation: flash-bg 1s linear;
  animation: flash-bg 1s linear;
  -webkit-animation-iteration-count: 3;
  -o-animation-iteration-count: 3;
  animation-iteration-count: 3;

  @-o-keyframes flash-bg {
    0% {
      background: $from
    }
    50% {
      background: $to
    }
    to {
      background: $from
    }
  }

  @-webkit-keyframes flash-bg {
    0% {
      background: $from
    }
    50% {
      background: $to
    }
    to {
      background: $from
    }
  }

  @keyframes flash-bg {
    0% {
      background: $from
    }
    50% {
      background: $to
    }
    to {
      background: $from
    }
  }
  @-o-keyframes flash-bg {
    0% {
      background: $from
    }
    50% {
      background: $to
    }
    to {
      background: $from
    }
  }

  @-webkit-keyframes flash-bg {
    0% {
      background: $from
    }
    50% {
      background: $to
    }
    to {
      background: $from
    }
  }

  @keyframes flash-bg {
    0% {
      background: $from
    }
    50% {
      background: $to
    }
    to {
      background: $from
    }
  }
}
