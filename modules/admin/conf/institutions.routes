# Repositories

GET         /                                         @controllers.institutions.Repositories.search(params: services.search.SearchParams ?= services.search.SearchParams.empty, paging: utils.PageParams ?= utils.PageParams.empty)
GET         /list                                     @controllers.institutions.Repositories.list(paging: utils.PageParams ?= utils.PageParams.empty)
GET         /:id                                      @controllers.institutions.Repositories.get(id: String, params: services.search.SearchParams ?= services.search.SearchParams.empty, paging: utils.PageParams ?= utils.PageParams.empty)
GET         /:id/history                              @controllers.institutions.Repositories.history(id: String, range: utils.RangeParams ?= utils.RangeParams.empty)
GET         /:id/delete                               @controllers.institutions.Repositories.delete(id: String)
POST        /:id/delete                               @controllers.institutions.Repositories.deletePost(id: String)
GET         /:id/update                               @controllers.institutions.Repositories.update(id: String)
POST        /:id/update                               @controllers.institutions.Repositories.updatePost(id: String)
GET         /:id/create                               @controllers.institutions.Repositories.createDoc(id: String)
POST        /:id/create                               @controllers.institutions.Repositories.createDocPost(id: String)
GET         /:id/visibility                           @controllers.institutions.Repositories.visibility(id: String)
POST        /:id/visibility                           @controllers.institutions.Repositories.visibilityPost(id: String)
GET         /:id/permissions/manage                   @controllers.institutions.Repositories.managePermissions(id: String, paging: utils.PageParams ?= utils.PageParams.empty, paging_s: utils.PageParams ?= utils.PageParams.empty)
GET         /:id/permissions/add                      @controllers.institutions.Repositories.addItemPermissions(id: String)
GET         /:id/permissions/:userType/:userId        @controllers.institutions.Repositories.setItemPermissions(id: String, userType: EntityType.Value, userId: String)
POST        /:id/permissions/:userType/:userId        @controllers.institutions.Repositories.setItemPermissionsPost(id: String, userType: EntityType.Value, userId: String)
GET         /:id/scope/add                            @controllers.institutions.Repositories.addScopedPermissions(id: String)
GET         /:id/scope/:userType/:userId              @controllers.institutions.Repositories.setScopedPermissions(id: String, userType: EntityType.Value, userId: String)
POST        /:id/scope/:userType/:userId              @controllers.institutions.Repositories.setScopedPermissionsPost(id: String, userType: EntityType.Value, userId: String)
GET         /:id/link                                 @controllers.institutions.Repositories.linkTo(id: String)
GET         /:id/link/:toType                         @controllers.institutions.Repositories.linkAnnotateSelect(id: String, toType: EntityType.Value, params: services.search.SearchParams ?= services.search.SearchParams.empty, paging: utils.PageParams ?= utils.PageParams.empty)
GET         /:id/link/:toType/:to                     @controllers.institutions.Repositories.linkAnnotate(id: String, toType: EntityType.Value, to: String, copy: Boolean ?= false)
POST        /:id/link/:toType/:to                     @controllers.institutions.Repositories.linkAnnotatePost(id: String, toType: EntityType.Value, to: String, copy: Boolean ?= false)
GET         /:id/reindex                              @controllers.institutions.Repositories.updateIndex(id: String)
GET         /:id/ingest                               @controllers.institutions.Repositories.ingest(id: String, sync: Boolean ?= false)
GET         /:id/logo                                 @controllers.institutions.Repositories.updateLogoImage(id: String)
POST        /:id/logo                                 @controllers.institutions.Repositories.updateLogoImagePost(id: String)

# Data management
GET         /:id/data                                 @controllers.institutions.RepositoryData.manager(id: String)
GET         /:id/data/file/:ds/:stage/:fileName       @controllers.institutions.RepositoryData.download(id: String, ds: String, stage: defines.FileStage.Value, fileName: String)
PUT         /:id/data/file/:ds/:stage/:fileName       @controllers.institutions.RepositoryData.uploadStream(id: String, ds: String, stage: defines.FileStage.Value, fileName: String)
GET         /:id/data/list/:ds/:stage                 @controllers.institutions.RepositoryData.listFiles(id: String, ds: String, stage: defines.FileStage.Value, path: Option[String] ?= None, from: Option[String] ?= None)
GET         /:id/data/count/:ds/:stage                @controllers.institutions.RepositoryData.countFiles(id: String, ds: String, stage: defines.FileStage.Value, path: Option[String] ?= None)
DELETE      /:id/data/delete/:ds/:stage               @controllers.institutions.RepositoryData.deleteFiles(id: String, ds: String, stage: defines.FileStage.Value)
DELETE      /:id/data/delete-all/:ds/:stage           @controllers.institutions.RepositoryData.deleteAll(id: String, ds: String, stage: defines.FileStage.Value)
POST        /:id/data/upload/:ds/:stage               @controllers.institutions.RepositoryData.uploadHandle(id: String, ds: String, stage: defines.FileStage.Value)
POST        /:id/data/validate/:ds/:stage             @controllers.institutions.RepositoryData.validateFiles(id: String, ds: String, stage: defines.FileStage.Value)
POST        /:id/data/ingest/:ds/:stage               @controllers.institutions.RepositoryData.ingestFiles(id: String, ds: String, stage: defines.FileStage.Value)
POST        /:id/data/ingest-all/:ds/:stage           @controllers.institutions.RepositoryData.ingestAll(id: String, ds: String, stage: defines.FileStage.Value)
POST        /:id/data/urls/:ds/:stage                 @controllers.institutions.RepositoryData.fileUrls(id: String, ds: String, stage: defines.FileStage.Value)

GET         /:id/validate-ead                         @controllers.institutions.RepositoryData.validateEad(id: String)
POST        /:id/validate-ead                         @controllers.institutions.RepositoryData.validateEadPost(id: String)

GET         /:id/transformations                      @controllers.institutions.RepositoryData.listDataTransformations(id: String)
POST        /:id/transformations                      @controllers.institutions.RepositoryData.createDataTransformation(id: String, generic: Boolean ?= false)
GET         /:id/transformations/:dt                  @controllers.institutions.RepositoryData.getDataTransformation(id: String, dt: String)
PUT         /:id/transformations/:dt                  @controllers.institutions.RepositoryData.updateDataTransformation(id: String, dt: String, generic: Boolean ?= false)
DELETE      /:id/transformations/:dt                  @controllers.institutions.RepositoryData.deleteDataTransformation(id: String, dt: String)

GET         /:id/oaipmh/:ds/config                    @controllers.institutions.RepositoryData.getOaiPmhConfig(id: String, ds: String)
PUT         /:id/oaipmh/:ds/config                    @controllers.institutions.RepositoryData.saveOaiPmhConfig(id: String, ds: String)
POST        /:id/oaipmh/:ds/config                    @controllers.institutions.RepositoryData.testOaiPmhConfig(id: String, ds: String)
DELETE      /:id/oaipmh/:ds/config                    @controllers.institutions.RepositoryData.deleteOaiPmhConfig(id: String, ds: String)
POST        /:id/oaipmh/:ds                           @controllers.institutions.RepositoryData.harvestOaiPmh(id: String, ds: String, fromLast: Boolean ?= true)
DELETE      /:id/oaipmh                               @controllers.institutions.RepositoryData.cancelOaiPmhHarvest(id: String, jobId: String)

DELETE      /:id/convert                              @controllers.institutions.RepositoryData.cancelConvert(id: String, jobId: String)
POST        /:id/convert/:ds                          @controllers.institutions.RepositoryData.convert(id: String, ds: String)
GET         /:id/convert/:ds/config                   @controllers.institutions.RepositoryData.getConvertConfig(id: String, ds: String)
PUT         /:id/convert/:ds/config                   @controllers.institutions.RepositoryData.saveConvertConfig(id: String, ds: String)
POST        /:id/convert/:ds/:stage/:fileName         @controllers.institutions.RepositoryData.convertFile(id: String, ds: String, stage: defines.FileStage.Value, fileName: String)

GET         /:id/datasets                             @controllers.institutions.RepositoryData.listDatasets(id: String)
POST        /:id/datasets                             @controllers.institutions.RepositoryData.createDataset(id: String)
DELETE      /:id/datasets/:ds                         @controllers.institutions.RepositoryData.deleteDataset(id: String, ds: String)


