# User routes

GET         /                                         @controllers.users.UserProfiles.search(params: services.search.SearchParams ?= services.search.SearchParams.empty, paging: utils.PageParams ?= utils.PageParams.empty)
GET         /list                                     @controllers.users.UserProfiles.list(paging: utils.PageParams ?= utils.PageParams.empty)
GET         /export                                   @controllers.users.UserProfiles.exportInfo()
GET         /create                                   @controllers.users.UserProfiles.createUser()
POST        /create                                   @controllers.users.UserProfiles.createUserPost()
GET         /syncDb                                   @controllers.users.UserProfiles.syncFromDbPost()
GET         /:id                                      @controllers.users.UserProfiles.get(id: String)
GET         /:id/history                              @controllers.users.UserProfiles.history(id: String, range: utils.RangeParams ?= utils.RangeParams.empty)
GET         /:id/actions                              @controllers.users.UserProfiles.actions(id: String, range: utils.RangeParams ?= utils.RangeParams.empty)
GET         /:id/delete                               @controllers.users.UserProfiles.delete(id: String)
POST        /:id/delete                               @controllers.users.UserProfiles.deletePost(id: String)
GET         /:id/update                               @controllers.users.UserProfiles.update(id: String)
POST        /:id/update                               @controllers.users.UserProfiles.updatePost(id: String)
GET         /:id/permissions                          @controllers.users.UserProfiles.permissions(id: String)
POST        /:id/permissions                          @controllers.users.UserProfiles.permissionsPost(id: String)
GET         /:id/permissions/list                     @controllers.users.UserProfiles.grantList(id: String, paging: utils.PageParams ?= utils.PageParams.empty)
GET         /:id/permissions/revoke/:permId           @controllers.users.UserProfiles.revokePermission(id: String, permId: String)
POST        /:id/permissions/revoke/:permId           @controllers.users.UserProfiles.revokePermissionPost(id: String, permId: String)
GET         /:id/permissions/manage                   @controllers.users.UserProfiles.managePermissions(id: String, paging: utils.PageParams ?= utils.PageParams.empty)
GET         /:id/permissions/add                      @controllers.users.UserProfiles.addItemPermissions(id: String)
GET         /:id/permissions/:userType/:userId        @controllers.users.UserProfiles.setItemPermissions(id: String, userType: models.EntityType.Value, userId: String)
POST        /:id/permissions/:userType/:userId        @controllers.users.UserProfiles.setItemPermissionsPost(id: String, userType: models.EntityType.Value, userId: String)
GET         /:id/groups                               @controllers.users.UserProfiles.membership(id: String)
GET         /:id/addTo/:groupId                       @controllers.users.UserProfiles.checkAddToGroup(id: String, groupId: String)
POST        /:id/addTo/:groupId                       @controllers.users.UserProfiles.addToGroup(id: String, groupId: String)
GET         /:id/removeFrom/:groupId                  @controllers.users.UserProfiles.checkRemoveFromGroup(id: String, groupId: String)
POST        /:id/removeFrom/:groupId                  @controllers.users.UserProfiles.removeFromGroup(id: String, groupId: String)
