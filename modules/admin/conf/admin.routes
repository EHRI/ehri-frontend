# Routes for user- and group-related functionality

# API
GET     /api/:id                                @controllers.admin.ApiController.getAny(id: String)
GET     /api/:contentType/list                  @controllers.admin.ApiController.listItems(contentType: defines.EntityType.Value)
GET     /api/:contentType/:id                   @controllers.admin.ApiController.getItem(contentType: defines.EntityType.Value, id: String)
GET     /api/*path                              @controllers.admin.ApiController.get(path: String)

# API Sparql queries - TESTING
GET     /sparql                                 @controllers.admin.ApiController.sparql
GET     /sparqlQuery                            @controllers.admin.ApiController.sparqlQuery

GET     /users                                  @controllers.admin.UserProfiles.search
GET     /users/list                             @controllers.admin.UserProfiles.list
GET     /users/create                           @controllers.admin.UserProfiles.createUser
POST    /users/create                           @controllers.admin.UserProfiles.createUserPost
GET     /users/:id                              @controllers.admin.UserProfiles.get(id: String)
GET     /users/:id/history                      @controllers.admin.UserProfiles.history(id: String)
GET     /users/:id/delete                       @controllers.admin.UserProfiles.delete(id: String)
POST    /users/:id/delete                       @controllers.admin.UserProfiles.deletePost(id: String)
GET     /users/:id/update                       @controllers.admin.UserProfiles.update(id: String)
POST    /users/:id/update                       @controllers.admin.UserProfiles.updatePost(id: String)
GET     /users/:id/permissions                  @controllers.admin.UserProfiles.permissions(id: String)
POST    /users/:id/permissions                  @controllers.admin.UserProfiles.permissionsPost(id: String)
GET     /users/:id/permissions/list             @controllers.admin.UserProfiles.grantList(id: String)
GET     /users/:id/permissions/revoke/:perm     @controllers.admin.UserProfiles.revokePermission(id: String, perm: String)
POST    /users/:id/permissions/revoke/:perm     @controllers.admin.UserProfiles.revokePermissionPost(id: String, perm: String)


GET     /groups                                  @controllers.admin.Groups.list
GET     /groups/create                           @controllers.admin.Groups.create
POST    /groups/create                           @controllers.admin.Groups.createPost
GET     /groups/:id                              @controllers.admin.Groups.get(id: String)
GET     /groups/:id/history                      @controllers.admin.Groups.history(id: String)
GET     /groups/:id/delete                       @controllers.admin.Groups.delete(id: String)
POST    /groups/:id/delete                       @controllers.admin.Groups.deletePost(id: String)
GET     /groups/:id/update                       @controllers.admin.Groups.update(id: String)
POST    /groups/:id/update                       @controllers.admin.Groups.updatePost(id: String)
GET     /groups/:id/permissions                  @controllers.admin.Groups.permissions(id: String)
POST    /groups/:id/permissions                  @controllers.admin.Groups.permissionsPost(id: String)
GET     /groups/:id/permissions/list             @controllers.admin.Groups.grantList(id: String)
GET     /groups/:id/permissions/revoke/:perm     @controllers.admin.Groups.revokePermission(id: String, perm: String)
POST    /groups/:id/permissions/revoke/:perm     @controllers.admin.Groups.revokePermissionPost(id: String, perm: String)
GET		/groups/members/:userType/:userId	     @controllers.admin.Groups.membership(userType: defines.EntityType.Value, userId: String)
GET		/groups/:id/add/:userType/:userId	     @controllers.admin.Groups.addMember(id: String, userType: defines.EntityType.Value, userId: String)
POST	/groups/:id/add/:userType/:userId	     @controllers.admin.Groups.addMemberPost(id: String, userType: defines.EntityType.Value, userId: String)
GET		/groups/:id/remove/:userType/:userId	 @controllers.admin.Groups.removeMember(id: String, userType: defines.EntityType.Value, userId: String)
POST	/groups/:id/remove/:userType/:userId	 @controllers.admin.Groups.removeMemberPost(id: String, userType: defines.EntityType.Value, userId: String)

GET     /events                                 @controllers.admin.SystemEvents.list
GET     /events/:id                             @controllers.admin.SystemEvents.get(id: String)

GET /assets/*file                               controllers.admin.Assets.at(path="/public", file)
