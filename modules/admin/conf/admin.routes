# Routes for user- and group-related functionality

# Routes for portal routes


GET         /                                   @controllers.admin.Home.index(params: utils.SystemEventParams ?= utils.SystemEventParams.empty, range: utils.RangeParams ?= utils.RangeParams.empty)
GET         /metrics                            @controllers.admin.Home.metrics()
GET         /overview                           @controllers.admin.Home.overview()
GET         /login                              @controllers.admin.Home.loginRedirect()

# Js Routes
GET         /metricRoutes                       @controllers.admin.Home.metricsJsRoutes()

GET         /update-index                       @controllers.admin.Indexing.updateIndex()
GET         /update-index-ws                    @controllers.admin.Indexing.indexer()

# Ingest
POST        /ingest                             @controllers.admin.Ingest.ingestPost(scopeType: models.ContentTypes.Value, scopeId: String, dataType: services.ingest.IngestService.IngestDataType.Value, fonds: Option[String] ?= None)
GET         /ingest                             @controllers.admin.Ingest.ingestMonitor(jobId: String)

# Tasks
GET         /tasks/monitor                      @controllers.admin.Tasks.taskMonitorWS(jobId: String)

# Search testing
GET         /search                             @controllers.admin.AdminSearch.search(params: services.search.SearchParams ?= services.search.SearchParams.empty, paging: utils.PageParams ?= utils.PageParams.empty)

# Metrics
GET         /metrics/languageOfMaterial         @controllers.admin.Metrics.languageOfMaterial()
GET         /metrics/holdingRepository          @controllers.admin.Metrics.holdingRepository()
GET         /metrics/repositoryCountries        @controllers.admin.Metrics.repositoryCountries()
GET         /metrics/agentTypes                 @controllers.admin.Metrics.agentTypes()
GET         /metrics/restricted                 @controllers.admin.Metrics.restricted()
GET         /metrics/_clear                     @controllers.admin.Metrics.clearCached()

# Monitoring
GET         /monitor/_check                     @controllers.admin.Utils.checkServices()
GET         /monitor/_checkUserSync             @controllers.admin.Utils.checkUserSync()

# API
# Forward to any dataApi GET method
GET         /api/*path                          @controllers.admin.Data.forward(path: String)

# Get items by id and type/id
GET         /item/:id                           @controllers.admin.Data.getItem(id: String)
GET         /item/:entityType/:id               @controllers.admin.Data.getItemType(entityType: models.EntityType.Value, id: String)
GET         /item/:entityType/:id/json          @controllers.admin.Data.getItemRawJson(entityType: models.EntityType.Value, id: String)

->          /users                              users.Routes
->          /groups                             groups.Routes
->          /events                             events.Routes
->          /annotation                         annotation.Routes
->          /links                              links.Routes

->          /units                              units.Routes
->          /institutions                       institutions.Routes
->          /virtual                            virtual.Routes
->          /countries                          countries.Routes
->          /sets                               sets.Routes
->          /authorities                        authorities.Routes
->          /vocabularies                       vocabularies.Routes
->          /keywords                           keywords.Routes

->          /tools                              tools.Routes
->          /datasets                           datasets.Routes

# Managing Cypher queries
->          /cypher                             cypher.Routes

GET         /assets/*file                       @controllers.admin.AdminAssets.at(path="/public/lib/docview-admin", file)
GET         /v/*file                            @controllers.admin.AdminAssets.versioned(path="/public/lib/docview-admin", file: Asset)
