# Virtual Documentary Units

GET         /                                         @controllers.virtual.VirtualUnits.search(params: services.search.SearchParams ?= services.search.SearchParams.empty, paging: utils.PageParams ?= utils.PageParams.empty)
GET         /contents/:id                             @controllers.virtual.VirtualUnits.contentsOf(id: String)
GET         /create                                   @controllers.virtual.VirtualUnits.create
POST        /create                                   @controllers.virtual.VirtualUnits.createPost
GET         /:id                                      @controllers.virtual.VirtualUnits.get(id: String, dlid: Option[String] ?= None, params: services.search.SearchParams ?= services.search.SearchParams.empty, paging: utils.PageParams ?= utils.PageParams.empty)
GET         /:id/history                              @controllers.virtual.VirtualUnits.history(id: String, range: utils.RangeParams ?= utils.RangeParams.empty)
GET         /:id/delete                               @controllers.virtual.VirtualUnits.delete(id: String)
POST        /:id/delete                               @controllers.virtual.VirtualUnits.deletePost(id: String)
GET         /:id/update                               @controllers.virtual.VirtualUnits.update(id: String)
POST        /:id/update                               @controllers.virtual.VirtualUnits.updatePost(id: String)
GET         /:id/create                               @controllers.virtual.VirtualUnits.createChild(id: String)
POST        /:id/create                               @controllers.virtual.VirtualUnits.createChildPost(id: String)
GET         /:id/createRef                            @controllers.virtual.VirtualUnits.createChildRef(id: String)
POST        /:id/createRef                            @controllers.virtual.VirtualUnits.createChildRefPost(id: String)
GET         /:id/deleteRef                            @controllers.virtual.VirtualUnits.deleteChildRef(id: String)
POST        /:id/deleteRef                            @controllers.virtual.VirtualUnits.deleteChildRefPost(id: String)
GET         /:id/createDescription                    @controllers.virtual.VirtualUnits.createDescription(id: String)
POST        /:id/createDescription                    @controllers.virtual.VirtualUnits.createDescriptionPost(id: String)
GET         /:id/updateDescription/:did               @controllers.virtual.VirtualUnits.updateDescription(id: String, did: String)
POST        /:id/updateDescription/:did               @controllers.virtual.VirtualUnits.updateDescriptionPost(id: String, did: String)
GET         /:id/deleteDescription/:did               @controllers.virtual.VirtualUnits.deleteDescription(id: String, did: String)
POST        /:id/deleteDescription/:did               @controllers.virtual.VirtualUnits.deleteDescriptionPost(id: String, did: String)
GET         /:id/visibility                           @controllers.virtual.VirtualUnits.visibility(id: String)
POST        /:id/visibility                           @controllers.virtual.VirtualUnits.visibilityPost(id: String)
GET         /:id/permissions/manage                   @controllers.virtual.VirtualUnits.managePermissions(id: String, paging: utils.PageParams ?= utils.PageParams.empty, paging_s: utils.PageParams ?= utils.PageParams.empty)
GET         /:id/permissions/add                      @controllers.virtual.VirtualUnits.addItemPermissions(id: String)
GET         /:id/permissions/:userType/:userId        @controllers.virtual.VirtualUnits.setItemPermissions(id: String, userType: EntityType.Value, userId: String)
POST        /:id/permissions/:userType/:userId        @controllers.virtual.VirtualUnits.setItemPermissionsPost(id: String, userType: EntityType.Value, userId: String)
GET         /:id/scope/add                            @controllers.virtual.VirtualUnits.addScopedPermissions(id: String)
GET         /:id/scope/:userType/:userId              @controllers.virtual.VirtualUnits.setScopedPermissions(id: String, userType: EntityType.Value, userId: String)
POST        /:id/scope/:userType/:userId              @controllers.virtual.VirtualUnits.setScopedPermissionsPost(id: String, userType: EntityType.Value, userId: String)
GET         /:id/link                                 @controllers.virtual.VirtualUnits.linkTo(id: String)
GET         /:id/link/:toType                         @controllers.virtual.VirtualUnits.linkAnnotateSelect(id: String, toType: EntityType.Value, params: services.search.SearchParams ?= services.search.SearchParams.empty, paging: utils.PageParams ?= utils.PageParams.empty)
GET         /:id/link/:toType/:to                     @controllers.virtual.VirtualUnits.linkAnnotate(id: String, toType: EntityType.Value, to: String)
POST        /:id/link/:toType/:to                     @controllers.virtual.VirtualUnits.linkAnnotatePost(id: String, toType: EntityType.Value, to: String)
POST        /:id/linkjs/:accessPoint                  @controllers.virtual.VirtualUnits.createLink(id: String, accessPoint: String)
GET         /:id/linkjs/:accessPoint                  @controllers.virtual.VirtualUnits.getLink(id: String, accessPoint: String)
POST        /:id/deleteLink/:link                     @controllers.virtual.VirtualUnits.deleteLink(id: String, link: String)
GET         /:via/:id                                 @controllers.virtual.VirtualUnits.getInVc(via: String, id: String, dlid: Option[String] ?= None, params: services.search.SearchParams ?= services.search.SearchParams.empty, paging: utils.PageParams ?= utils.PageParams.empty)

