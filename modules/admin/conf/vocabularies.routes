# Routes for vocabularies

GET         /                                         @controllers.vocabularies.Vocabularies.list(paging: utils.PageParams ?= utils.PageParams.empty)
GET         /create                                   @controllers.vocabularies.Vocabularies.create()
POST        /create                                   @controllers.vocabularies.Vocabularies.createPost()
GET         /:id                                      @controllers.vocabularies.Vocabularies.get(id: String, params: services.search.SearchParams ?= services.search.SearchParams.empty, paging: utils.PageParams ?= utils.PageParams.empty)
GET         /:id/history                              @controllers.vocabularies.Vocabularies.history(id: String, range: utils.RangeParams ?= utils.RangeParams.empty)
GET         /:id/delete                               @controllers.vocabularies.Vocabularies.delete(id: String, paging: utils.PageParams ?= utils.PageParams.empty)
POST        /:id/delete                               @controllers.vocabularies.Vocabularies.deletePost(id: String)
GET         /:id/delete-contents                      @controllers.vocabularies.Vocabularies.deleteContents(id: String, paging: utils.PageParams ?= utils.PageParams.empty)
POST        /:id/delete-contents                      @controllers.vocabularies.Vocabularies.deleteContentsPost(id: String, paging: utils.PageParams ?= utils.PageParams.empty)
GET         /:id/update                               @controllers.vocabularies.Vocabularies.update(id: String)
POST        /:id/update                               @controllers.vocabularies.Vocabularies.updatePost(id: String)
GET         /:id/create                               @controllers.vocabularies.Vocabularies.createConcept(id: String)
POST        /:id/create                               @controllers.vocabularies.Vocabularies.createConceptPost(id: String)
GET         /:id/visibility                           @controllers.vocabularies.Vocabularies.visibility(id: String)
POST        /:id/visibility                           @controllers.vocabularies.Vocabularies.visibilityPost(id: String)
GET         /:id/permissions/manage                   @controllers.vocabularies.Vocabularies.managePermissions(id: String, paging: utils.PageParams ?= utils.PageParams.empty, paging_s: utils.PageParams ?= utils.PageParams.empty)
GET         /:id/permissions/add                      @controllers.vocabularies.Vocabularies.addItemPermissions(id: String)
GET         /:id/permissions/:userType/:userId        @controllers.vocabularies.Vocabularies.setItemPermissions(id: String, userType: models.EntityType.Value, userId: String)
POST        /:id/permissions/:userType/:userId        @controllers.vocabularies.Vocabularies.setItemPermissionsPost(id: String, userType: models.EntityType.Value, userId: String)
GET         /:id/scope/add                            @controllers.vocabularies.Vocabularies.addScopedPermissions(id: String)
GET         /:id/scope/:userType/:userId              @controllers.vocabularies.Vocabularies.setScopedPermissions(id: String, userType: models.EntityType.Value, userId: String)
POST        /:id/scope/:userType/:userId              @controllers.vocabularies.Vocabularies.setScopedPermissionsPost(id: String, userType: models.EntityType.Value, userId: String)
GET         /:id/promote                              @controllers.vocabularies.Vocabularies.promote(id: String)
POST        /:id/promote                              @controllers.vocabularies.Vocabularies.promotePost(id: String)
GET         /:id/demote                               @controllers.vocabularies.Vocabularies.demote(id: String)
POST        /:id/demote                               @controllers.vocabularies.Vocabularies.demotePost(id: String)
GET         /:id/reindex                              @controllers.vocabularies.Vocabularies.updateIndex(id: String)
GET         /:id/ingest                               @controllers.vocabularies.Vocabularies.ingest(id: String)

GET         /:id/editor                               @controllers.vocabularies.VocabularyEditor.editor(id: String)
GET         /:id/editor/search                        @controllers.vocabularies.VocabularyEditor.search(id: String, params: services.search.SearchParams ?= services.search.SearchParams.empty, paging: utils.PageParams ?= utils.PageParams.empty)
GET         /:id/editor/list                          @controllers.vocabularies.VocabularyEditor.list(id: String, q: Option[String] ?= None, lang: String ?= "eng")
GET         /:id/editor/langs                         @controllers.vocabularies.VocabularyEditor.langs(id: String)
POST        /:id/editor/create                        @controllers.vocabularies.VocabularyEditor.createItem(id: String)
GET         /:id/editor/next-id                       @controllers.vocabularies.VocabularyEditor.nextIdentifier(id: String)
GET         /:id/editor/get/:cid                      @controllers.vocabularies.VocabularyEditor.get(id: String, cid: String)
POST        /:id/editor/update/:cid                   @controllers.vocabularies.VocabularyEditor.updateItem(id: String, cid: String)
POST        /:id/editor/delete/:cid                   @controllers.vocabularies.VocabularyEditor.deleteItem(id: String, cid: String)
POST        /:id/editor/broader/:cid                  @controllers.vocabularies.VocabularyEditor.broader(id: String, cid: String)
GET         /:id/editor/narrower/:cid                 @controllers.vocabularies.VocabularyEditor.narrower(id: String, cid: String, lang: String ?= "eng")

