# Routes for countries/repositories/documentary units

# Home page
GET     /units                                           @controllers.archdesc.DocumentaryUnits.search
GET     /units/list                                      @controllers.archdesc.DocumentaryUnits.list
# Testing
GET     /units/meta/:id                                  @controllers.archdesc.DocumentaryUnits.getClientJson(id)

GET     /units/:id                                       @controllers.archdesc.DocumentaryUnits.get(id: String)
GET     /units/:id/history                               @controllers.archdesc.DocumentaryUnits.history(id: String)
GET     /units/:id/delete                                @controllers.archdesc.DocumentaryUnits.delete(id: String)
POST    /units/:id/delete                                @controllers.archdesc.DocumentaryUnits.deletePost(id: String)
GET     /units/:id/update                                @controllers.archdesc.DocumentaryUnits.update(id: String)
POST    /units/:id/update                                @controllers.archdesc.DocumentaryUnits.updatePost(id: String)
GET     /units/:id/create                                @controllers.archdesc.DocumentaryUnits.createDoc(id: String)
POST    /units/:id/create                                @controllers.archdesc.DocumentaryUnits.createDocPost(id: String)
GET     /units/:id/createDescription                     @controllers.archdesc.DocumentaryUnits.createDescription(id: String)
POST    /units/:id/createDescription                     @controllers.archdesc.DocumentaryUnits.createDescriptionPost(id: String)
GET     /units/:id/updateDescription/:did                @controllers.archdesc.DocumentaryUnits.updateDescription(id: String, did: String)
POST    /units/:id/updateDescription/:did                @controllers.archdesc.DocumentaryUnits.updateDescriptionPost(id: String, did: String)
GET     /units/:id/deleteDescription/:did                @controllers.archdesc.DocumentaryUnits.deleteDescription(id: String, did: String)
POST    /units/:id/deleteDescription/:did                @controllers.archdesc.DocumentaryUnits.deleteDescriptionPost(id: String, did: String)
GET     /units/:id/visibility                            @controllers.archdesc.DocumentaryUnits.visibility(id: String)
POST    /units/:id/visibility                            @controllers.archdesc.DocumentaryUnits.visibilityPost(id: String)
GET     /units/:id/permissions/manage                    @controllers.archdesc.DocumentaryUnits.managePermissions(id: String)
GET     /units/:id/permissions/add                       @controllers.archdesc.DocumentaryUnits.addItemPermissions(id: String)
GET     /units/:id/permissions/:userType/:userId         @controllers.archdesc.DocumentaryUnits.setItemPermissions(id: String, userType: EntityType.Value, userId: String)
POST    /units/:id/permissions/:userType/:userId         @controllers.archdesc.DocumentaryUnits.setItemPermissionsPost(id: String, userType: EntityType.Value, userId: String)
GET     /units/:id/scope/add                             @controllers.archdesc.DocumentaryUnits.addScopedPermissions(id: String)
GET     /units/:id/scope/:userType/:userId               @controllers.archdesc.DocumentaryUnits.setScopedPermissions(id: String, userType: EntityType.Value, userId: String)
POST    /units/:id/scope/:userType/:userId               @controllers.archdesc.DocumentaryUnits.setScopedPermissionsPost(id: String, userType: EntityType.Value, userId: String)

GET     /units/:id/link                                  @controllers.archdesc.DocumentaryUnits.linkTo(id: String)
GET     /units/:id/link/:toType                          @controllers.archdesc.DocumentaryUnits.linkAnnotateSelect(id: String, toType: EntityType.Value)
GET     /units/:id/link/:toType/:to                      @controllers.archdesc.DocumentaryUnits.linkAnnotate(id: String, toType: EntityType.Value, to: String)
POST    /units/:id/link/:toType/:to                      @controllers.archdesc.DocumentaryUnits.linkAnnotatePost(id: String, toType: EntityType.Value, to: String)
GET     /units/:id/linkm                                 @controllers.archdesc.DocumentaryUnits.linkMultiAnnotate(id: String)
POST    /units/:id/linkm                                 @controllers.archdesc.DocumentaryUnits.linkMultiAnnotatePost(id)
POST    /units/:id/linkjs/:accessPoint                   @controllers.archdesc.DocumentaryUnits.createLink(id: String, accessPoint: String)
GET     /units/:id/linkjs/:accessPoint                   @controllers.archdesc.DocumentaryUnits.getLink(id: String, accessPoint: String)
POST    /units/:id/linkjs                                @controllers.archdesc.DocumentaryUnits.createMultipleLinks(id: String)
# Refetch access point HTML@
POST    /units/:id/accessPoints/create/:desc             @controllers.archdesc.DocumentaryUnits.createAccessPoint(id: String, desc: String)
GET     /units/:id/accessPoints/:desc                    @controllers.archdesc.DocumentaryUnits.manageAccessPoints(id: String, desc: String)
GET     /units/:id/accessPointsJs                        @controllers.archdesc.DocumentaryUnits.getAccessPointsJson(id: String)
POST    /units/:id/deleteAccess/:did/:accessPoint        @controllers.archdesc.DocumentaryUnits.deleteAccessPoint(id: String, did: String, accessPoint: String)
POST    /units/:id/deleteLink/:link                      @controllers.archdesc.DocumentaryUnits.deleteLink(id: String, link: String)
POST    /units/:id/deleteLink/:did/:accessPoint/:link    @controllers.archdesc.DocumentaryUnits.deleteLinkAndAccessPoint(id: String, did: String, accessPoint: String, link: String)


# Virtual Documentary Units
GET     /virtual                                             @controllers.archdesc.VirtualUnits.search
GET     /virtual/create                                      @controllers.archdesc.VirtualUnits.create
POST    /virtual/create                                      @controllers.archdesc.VirtualUnits.createPost
GET     /virtual/:id                                         @controllers.archdesc.VirtualUnits.get(id: String)
GET     /virtual/:id/meta                                    @controllers.archdesc.VirtualUnits.getClientJson(id)
GET     /virtual/:id/history                                 @controllers.archdesc.VirtualUnits.history(id: String)
GET     /virtual/:id/delete                                  @controllers.archdesc.VirtualUnits.delete(id: String)
POST    /virtual/:id/delete                                  @controllers.archdesc.VirtualUnits.deletePost(id: String)
GET     /virtual/:id/update                                  @controllers.archdesc.VirtualUnits.update(id: String)
POST    /virtual/:id/update                                  @controllers.archdesc.VirtualUnits.updatePost(id: String)
GET     /virtual/:id/create                                  @controllers.archdesc.VirtualUnits.createChild(id: String)
GET     /virtual/:id/createRef                               @controllers.archdesc.VirtualUnits.createChildRef(id: String)
POST    /virtual/:id/createRef                               @controllers.archdesc.VirtualUnits.createChildRefPost(id: String)
POST    /virtual/:id/create                                  @controllers.archdesc.VirtualUnits.createChildPost(id: String)
GET     /virtual/:id/createDescription                       @controllers.archdesc.VirtualUnits.createDescription(id: String)
POST    /virtual/:id/createDescription                       @controllers.archdesc.VirtualUnits.createDescriptionPost(id: String)
GET     /virtual/:id/createRef/:did                          @controllers.archdesc.VirtualUnits.createDescriptionRef(id: String, did: String)
POST    /virtual/:id/createRef/:did                          @controllers.archdesc.VirtualUnits.createDescriptionRefPost(id: String, did: String)
GET     /virtual/:id/updateDescription/:did                  @controllers.archdesc.VirtualUnits.updateDescription(id: String, did: String)
POST    /virtual/:id/updateDescription/:did                  @controllers.archdesc.VirtualUnits.updateDescriptionPost(id: String, did: String)
GET     /virtual/:id/deleteDescription/:did                  @controllers.archdesc.VirtualUnits.deleteDescription(id: String, did: String)
POST    /virtual/:id/deleteDescription/:did                  @controllers.archdesc.VirtualUnits.deleteDescriptionPost(id: String, did: String)
GET     /virtual/:id/visibility                              @controllers.archdesc.VirtualUnits.visibility(id: String)
POST    /virtual/:id/visibility                              @controllers.archdesc.VirtualUnits.visibilityPost(id: String)
GET     /virtual/:id/permissions/manage                      @controllers.archdesc.VirtualUnits.managePermissions(id: String)
GET     /virtual/:id/permissions/add                         @controllers.archdesc.VirtualUnits.addItemPermissions(id: String)
GET     /virtual/:id/permissions/:userType/:userId           @controllers.archdesc.VirtualUnits.setItemPermissions(id: String, userType: EntityType.Value, userId: String)
POST    /virtual/:id/permissions/:userType/:userId           @controllers.archdesc.VirtualUnits.setItemPermissionsPost(id: String, userType: EntityType.Value, userId: String)
GET     /virtual/:id/scope/add                               @controllers.archdesc.VirtualUnits.addScopedPermissions(id: String)
GET     /virtual/:id/scope/:userType/:userId                 @controllers.archdesc.VirtualUnits.setScopedPermissions(id: String, userType: EntityType.Value, userId: String)
POST    /virtual/:id/scope/:userType/:userId                 @controllers.archdesc.VirtualUnits.setScopedPermissionsPost(id: String, userType: EntityType.Value, userId: String)
GET     /virtual/:id/link                                    @controllers.archdesc.VirtualUnits.linkTo(id: String)
GET     /virtual/:id/link/:toType                            @controllers.archdesc.VirtualUnits.linkAnnotateSelect(id: String, toType: EntityType.Value)
GET     /virtual/:id/link/:toType/:to                        @controllers.archdesc.VirtualUnits.linkAnnotate(id: String, toType: EntityType.Value, to: String)
POST    /virtual/:id/link/:toType/:to                        @controllers.archdesc.VirtualUnits.linkAnnotatePost(id: String, toType: EntityType.Value, to: String)
GET     /virtual/:id/linkm                                   @controllers.archdesc.VirtualUnits.linkMultiAnnotate(id: String)
POST    /virtual/:id/linkm                                   @controllers.archdesc.VirtualUnits.linkMultiAnnotatePost(id)
POST    /virtual/:id/linkjs/:accessPoint                     @controllers.archdesc.VirtualUnits.createLink(id: String, accessPoint: String)
GET     /virtual/:id/linkjs/:accessPoint                     @controllers.archdesc.VirtualUnits.getLink(id: String, accessPoint: String)
POST    /virtual/:id/linkjs                                  @controllers.archdesc.VirtualUnits.createMultipleLinks(id: String)
POST    /virtual/:id/deleteLink/:link                        @controllers.archdesc.VirtualUnits.deleteLink(id: String, link: String)

# Testing
GET     /institutions/meta/:id                            @controllers.archdesc.Repositories.getClientJson(id)

GET     /institutions                                     @controllers.archdesc.Repositories.search
GET     /institutions/list                                @controllers.archdesc.Repositories.list
GET     /institutions/:id                            @controllers.archdesc.Repositories.get(id: String)
GET     /institutions/:id/history                         @controllers.archdesc.Repositories.history(id: String)
GET     /institutions/:id/delete                          @controllers.archdesc.Repositories.delete(id: String)
POST    /institutions/:id/delete                          @controllers.archdesc.Repositories.deletePost(id: String)
GET     /institutions/:id/update                          @controllers.archdesc.Repositories.update(id: String)
POST    /institutions/:id/update                          @controllers.archdesc.Repositories.updatePost(id: String)
GET     /institutions/:id/create                          @controllers.archdesc.Repositories.createDoc(id: String)
POST    /institutions/:id/create                          @controllers.archdesc.Repositories.createDocPost(id: String)
GET     /institutions/:id/visibility                      @controllers.archdesc.Repositories.visibility(id: String)
POST    /institutions/:id/visibility                      @controllers.archdesc.Repositories.visibilityPost(id: String)
GET     /institutions/:id/permissions/manage              @controllers.archdesc.Repositories.managePermissions(id: String)
GET     /institutions/:id/permissions/add                 @controllers.archdesc.Repositories.addItemPermissions(id: String)
GET     /institutions/:id/permissions/:userType/:userId   @controllers.archdesc.Repositories.setItemPermissions(id: String, userType: EntityType.Value, userId: String)
POST    /institutions/:id/permissions/:userType/:userId   @controllers.archdesc.Repositories.setItemPermissionsPost(id: String, userType: EntityType.Value, userId: String)
GET     /institutions/:id/scope/add                       @controllers.archdesc.Repositories.addScopedPermissions(id: String)
GET     /institutions/:id/scope/:userType/:userId         @controllers.archdesc.Repositories.setScopedPermissions(id: String, userType: EntityType.Value, userId: String)
POST    /institutions/:id/scope/:userType/:userId         @controllers.archdesc.Repositories.setScopedPermissionsPost(id: String, userType: EntityType.Value, userId: String)
GET     /institutions/:id/reindex                         @controllers.archdesc.Repositories.updateIndex(id: String)
POST    /institutions/:id/reindex                         @controllers.archdesc.Repositories.updateIndexPost(id: String)

GET     /countries                                        @controllers.archdesc.Countries.search
GET     /countries/create                                 @controllers.archdesc.Countries.create
POST    /countries/create                                 @controllers.archdesc.Countries.createPost
GET     /countries/:id                                    @controllers.archdesc.Countries.get(id: String)
GET     /countries/:id/history                            @controllers.archdesc.Countries.history(id: String)
GET     /countries/:id/delete                             @controllers.archdesc.Countries.delete(id: String)
POST    /countries/:id/delete                             @controllers.archdesc.Countries.deletePost(id: String)
GET     /countries/:id/update                             @controllers.archdesc.Countries.update(id: String)
POST    /countries/:id/update                             @controllers.archdesc.Countries.updatePost(id: String)
GET     /countries/:id/create                             @controllers.archdesc.Countries.createRepository(id: String)
POST    /countries/:id/create                             @controllers.archdesc.Countries.createRepositoryPost(id: String)
GET     /countries/:id/visibility                         @controllers.archdesc.Countries.visibility(id: String)
POST    /countries/:id/visibility                         @controllers.archdesc.Countries.visibilityPost(id: String)
GET     /countries/:id/permissions/manage                 @controllers.archdesc.Countries.managePermissions(id: String)
GET     /countries/:id/permissions/add                    @controllers.archdesc.Countries.addItemPermissions(id: String)
GET     /countries/:id/permissions/:userType/:userId      @controllers.archdesc.Countries.setItemPermissions(id: String, userType: EntityType.Value, userId: String)
POST    /countries/:id/permissions/:userType/:userId      @controllers.archdesc.Countries.setItemPermissionsPost(id: String, userType: EntityType.Value, userId: String)
GET     /countries/:id/scope/add                          @controllers.archdesc.Countries.addScopedPermissions(id: String)
GET     /countries/:id/scope/:userType/:userId            @controllers.archdesc.Countries.setScopedPermissions(id: String, userType: EntityType.Value, userId: String)
POST    /countries/:id/scope/:userType/:userId            @controllers.archdesc.Countries.setScopedPermissionsPost(id: String, userType: EntityType.Value, userId: String)

# Assets...
GET /assets/*file                                         controllers.archdesc.Assets.at(path="/public", file)
